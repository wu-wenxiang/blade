{{ .Boilerplate }}

package healthz

import (
	"bytes"
	"fmt"
	"github.com/labstack/echo/v4"
	"net/http"
)

func EchoWrapHandler(check HealthChecker) echo.HandlerFunc {
	return func(c echo.Context) error {
		err := check.Check(c.Request())
		if err != nil {
			return c.String(http.StatusInternalServerError, fmt.Sprintf("internal server error: %v", err))
		} else {
			return c.String(http.StatusOK, "ok")
		}
	}
}

func InstallHealthCheck(e *echo.Echo, checks ...HealthChecker) {
	e.GET("/healthz", handleRootHealthz(checks...))
	for _, check := range checks {
		e.GET(fmt.Sprintf("%s/%v", "/healthz", check.Name()), EchoWrapHandler(check))
	}
}

// HealthChecker is a named healthz checker.
type HealthChecker interface {
	Name() string
	Check(req *http.Request) error
}

// healthzCheck implements HealthChecker on an arbitrary name and check function.
type healthzCheck struct {
	name  string
	check func(r *http.Request) error
}

var _ HealthChecker = &healthzCheck{}

func (c *healthzCheck) Name() string {
	return c.name
}

func (c *healthzCheck) Check(r *http.Request) error {
	return c.check(r)
}

// NamedCheck returns a healthz checker for the given name and function.
func NamedCheck(name string, check func(r *http.Request) error) HealthChecker {
	return &healthzCheck{name, check}
}

// handleRootHealthz returns an http.HandlerFunc that serves the provided checks.
func handleRootHealthz(checks ...HealthChecker) echo.HandlerFunc {
	return func(c echo.Context) error {
		failed := false
		var verboseOut bytes.Buffer
		for _, check := range checks {
			if err := check.Check(c.Request()); err != nil {
				_, _ = fmt.Fprintf(&verboseOut, "[-]%v failed: reason withheld\n", check.Name())
				failed = true
			} else {
				_, _ = fmt.Fprintf(&verboseOut, "[+]%v ok\n", check.Name())
			}
		}
		// always be verbose on failure
		if failed {
			return c.String(http.StatusInternalServerError, fmt.Sprintf("%vhealthz check failed", verboseOut.String()))
		}
		if v := c.QueryParam("verbose"); v == "" {
			return c.String(http.StatusOK, "ok")
		}

		_, _ = fmt.Fprintf(&verboseOut, "healthz check passed\n")
		return c.String(http.StatusOK, verboseOut.String())
	}
}
